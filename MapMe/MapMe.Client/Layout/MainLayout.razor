@inherits LayoutComponentBase
@inject IJSRuntime JSRuntime
@inject NavigationManager Navigation
@using Microsoft.AspNetCore.Components.Authorization

<HeadContent>
    <!-- Bootstrap is now loaded from server-side App.razor -->
</HeadContent>

@if (IsScriptLoaded)
{
    @if (IsPublicPage())
    {
        <!-- Public pages (login, signup, etc.) - no authentication required -->
        <div class="page">
            <article class="content px-0">
                @Body
            </article>
        </div>
    }
    else
    {
        <!-- Protected pages - require authentication -->
        <AuthorizeView>
            <Authorized>
                <div class="page">
                    <div class="sidebar">
                        <NavMenu/>
                    </div>

                    <main>
                        <div class="top-row px-4">
                            <a href="https://learn.microsoft.com/aspnet/core/" target="_blank">About</a>
                        </div>

                        <article class="content px-4">
                            @Body
                        </article>
                    </main>
                </div>
            </Authorized>
            <NotAuthorized>
                @{
                    // Redirect to login if not authenticated
                    Navigation.NavigateTo("/login");
                }
            </NotAuthorized>
        </AuthorizeView>
    }

    <div id="blazor-error-ui" data-nosnippet>
        An unhandled error has occurred.
        <a href="." class="reload">Reload</a>
        <span class="dismiss">ðŸ—™</span>
    </div>
}
else
{
    <div class="d-flex justify-content-center align-items-center" style="height: 100vh;">
        <div class="text-center">
            <div class="spinner-border text-primary mb-3" role="status">
                <span class="visually-hidden">Loading...</span>
            </div>
            <h4>Loading application...</h4>
            <p class="text-muted">Initializing MapMe scripts...</p>
        </div>
    </div>
}

@code {
    private bool IsScriptLoaded { get; set; }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            try
            {
                // Ensure Bootstrap is loaded
                var bootstrapCheck = @"
                    if (typeof bootstrap === 'undefined') {
                        console.error('Bootstrap is not loaded!');
                    } else {
                        console.log('Bootstrap loaded successfully');
                    }";
                await JSRuntime.InvokeVoidAsync("eval", bootstrapCheck);
                
                // Initialize Blazor Bootstrap
                var initBootstrap = @"
                    if (typeof blazorBootstrap === 'undefined') {
                        window.blazorBootstrap = {};
                        console.log('Initialized blazorBootstrap');
                    }";
                await JSRuntime.InvokeVoidAsync("eval", initBootstrap);
                
                // Load the map initializer script
                await JSRuntime.InvokeVoidAsync("import", "/js/mapInitializer.js");
                
                IsScriptLoaded = true;
                StateHasChanged();
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error initializing scripts: {ex.Message}");
            }
        }
    }

    /// <summary>
    /// Determines if the current page should be accessible without authentication
    /// </summary>
    private bool IsPublicPage()
    {
        var currentPath = Navigation.ToBaseRelativePath(Navigation.Uri).ToLowerInvariant();
        
        // List of public pages that don't require authentication
        var publicPages = new[]
        {
            "",           // Root/home page
            "login",      // Login page
            "signup",     // Registration page
            "register",   // Alternative registration route
            "forgot-password", // Password reset
            "reset-password"   // Password reset confirmation
        };

        return publicPages.Any(page => 
            currentPath == page || 
            currentPath.StartsWith($"{page}/") ||
            currentPath.StartsWith($"{page}?"));
    }
}