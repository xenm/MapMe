@inherits LayoutComponentBase
@inject IJSRuntime JSRuntime
@inject NavigationManager Navigation
@inject MapMe.Client.Services.AuthenticationService AuthService
@using Microsoft.AspNetCore.Components.Authorization

<!-- No global CSS in MainLayout - each page loads its own CSS -->

@if (IsScriptLoaded)
{
    @if (IsPublicPage())
    {
        <!-- Public pages (login, signup, etc.) - no authentication required -->
        <div class="page">
            <article class="content px-0">
                @Body
            </article>
        </div>
    }
    else
    {
        <!-- Protected pages - require authentication -->
        <AuthorizeView>
            <Authorized>
                <!-- Direct Bootstrap Navbar - No separate component -->
                <nav class="navbar navbar-expand-lg navbar-dark bg-primary fixed-top">
                    <div class="container-fluid">
                        <a class="navbar-brand fw-bold" href="/map">
                            <i class="bi bi-geo-alt-fill me-2"></i>MapMe
                        </a>
                        
                        <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarNav" 
                                aria-controls="navbarNav" aria-expanded="false" aria-label="Toggle navigation">
                            <span class="navbar-toggler-icon"></span>
                        </button>
                        
                        <div class="collapse navbar-collapse" id="navbarNav">
                            <ul class="navbar-nav me-auto">
                                <li class="nav-item">
                                    <a class="nav-link @(IsCurrentPage("/map") ? "active" : "")" href="/map">
                                        <i class="bi bi-map-fill me-1"></i> Map
                                    </a>
                                </li>
                                <li class="nav-item">
                                    <a class="nav-link @(IsCurrentPage("/profile") ? "active" : "")" href="/profile">
                                        <i class="bi bi-person-fill me-1"></i> Profile
                                    </a>
                                </li>
                                <li class="nav-item">
                                    <a class="nav-link @(IsCurrentPage("/chat") ? "active" : "")" href="/chat">
                                        <i class="bi bi-chat-fill me-1"></i> Chat
                                    </a>
                                </li>
                            </ul>
                            <div class="d-flex">
                                <button class="btn btn-outline-light" @onclick="HandleLogoutAsync">
                                    <i class="bi bi-box-arrow-right me-1"></i> Logout
                                </button>
                            </div>
                        </div>
                    </div>
                </nav>
                
                <!-- Main content area with proper padding for fixed navbar -->
                <div class="container-fluid" style="padding-top: 80px;">
                    @Body
                </div>
            </Authorized>
            <NotAuthorized>
                @{
                    // Redirect to login if not authenticated
                    Navigation.NavigateTo("/login");
                }
            </NotAuthorized>
        </AuthorizeView>
    }

    <div id="blazor-error-ui" data-nosnippet>
        An unhandled error has occurred.
        <a href="." class="reload">Reload</a>
        <span class="dismiss">ðŸ—™</span>
    </div>
}
else
{
    <div class="d-flex justify-content-center align-items-center" style="height: 100vh;">
        <div class="text-center">
            <div class="spinner-border text-primary mb-3" role="status">
                <span class="visually-hidden">Loading...</span>
            </div>
            <h4>Loading application...</h4>
            <p class="text-muted">Initializing MapMe scripts...</p>
        </div>
    </div>
}

@code {
    private bool IsScriptLoaded { get; set; }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            try
            {
                // Ensure Bootstrap is loaded
                var bootstrapCheck = @"
                    if (typeof bootstrap === 'undefined') {
                        console.error('Bootstrap is not loaded!');
                    } else {
                        console.log('Bootstrap loaded successfully');
                    }";
                await JSRuntime.InvokeVoidAsync("eval", bootstrapCheck);
                
                // Initialize Blazor Bootstrap
                var initBootstrap = @"
                    if (typeof blazorBootstrap === 'undefined') {
                        window.blazorBootstrap = {};
                        console.log('Initialized blazorBootstrap');
                    }";
                await JSRuntime.InvokeVoidAsync("eval", initBootstrap);
                
                // Load the map initializer script
                await JSRuntime.InvokeVoidAsync("import", "/js/mapInitializer.js");
                
                IsScriptLoaded = true;
                StateHasChanged();
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error initializing scripts: {ex.Message}");
            }
        }
    }

    /// <summary>
    /// Determines if the current page should be accessible without authentication
    /// </summary>
    private bool IsPublicPage()
    {
        var currentPath = Navigation.ToBaseRelativePath(Navigation.Uri).ToLowerInvariant();
        
        // List of public pages that don't require authentication
        var publicPages = new[]
        {
            "",           // Root/home page
            "login",      // Login page
            "signup",     // Registration page
            "register",   // Alternative registration route
            "forgot-password", // Password reset
            "reset-password"   // Password reset confirmation
        };

        return publicPages.Any(page => 
            currentPath == page || 
            currentPath.StartsWith($"{page}/") ||
            currentPath.StartsWith($"{page}?"));
    }

    /// <summary>
    /// Checks if the current page matches the given path for active navigation styling
    /// </summary>
    private bool IsCurrentPage(string path)
    {
        var currentPath = Navigation.ToBaseRelativePath(Navigation.Uri).ToLowerInvariant();
        return currentPath == path.TrimStart('/').ToLowerInvariant();
    }

    /// <summary>
    /// Handles user logout
    /// </summary>
    private async Task HandleLogoutAsync()
    {
        await AuthService.LogoutAsync();
        Navigation.NavigateTo("/login", forceLoad: true);
    }
}