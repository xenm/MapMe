@page "/login"
@using MapMe.Client.DTOs
@using MapMe.Client.Services
@using Microsoft.JSInterop
@using Microsoft.AspNetCore.Authorization
@attribute [AllowAnonymous]
@inject AuthenticationService AuthService
@inject NavigationManager Navigation
@inject IJSRuntime JSRuntime

<PageTitle>Login - MapMe</PageTitle>

<div class="container-fluid vh-100 d-flex align-items-center justify-content-center bg-light">
    <div class="row w-100">
        <div class="col-12 col-md-6 col-lg-4 mx-auto">
            <div class="card shadow-lg border-0">
                <div class="card-body p-5">
                    <!-- Header -->
                    <div class="text-center mb-4">
                        <h1 class="h3 mb-3 fw-bold text-primary">Welcome Back</h1>
                        <p class="text-muted">Sign in to your MapMe account</p>
                    </div>

                    <!-- Login Form -->
                    <EditForm Model="@_loginRequest" OnValidSubmit="@HandleLoginAsync">
                        <DataAnnotationsValidator />
                        
                        <!-- Error Message -->
                        @if (!string.IsNullOrEmpty(_errorMessage))
                        {
                            <div class="alert alert-danger" role="alert">
                                <i class="bi bi-exclamation-triangle-fill me-2"></i>
                                @_errorMessage
                            </div>
                        }

                        <!-- Username Field -->
                        <div class="mb-3">
                            <label for="username" class="form-label">Username</label>
                            <div class="input-group">
                                <span class="input-group-text"><i class="bi bi-person"></i></span>
                                <InputText @bind-Value="_loginRequest.Username" 
                                          class="form-control" 
                                          id="username" 
                                          placeholder="Enter your username"
                                          disabled="@_isLoading" />
                            </div>
                            <ValidationMessage For="@(() => _loginRequest.Username)" class="text-danger small" />
                        </div>

                        <!-- Password Field -->
                        <div class="mb-3">
                            <label for="password" class="form-label">Password</label>
                            <div class="input-group">
                                <span class="input-group-text"><i class="bi bi-lock"></i></span>
                                <InputText @bind-Value="_loginRequest.Password" 
                                          type="@(_showPassword ? "text" : "password")"
                                          class="form-control" 
                                          id="password" 
                                          placeholder="Enter your password"
                                          disabled="@_isLoading" />
                                <button class="btn btn-outline-secondary" 
                                        type="button" 
                                        @onclick="TogglePasswordVisibility"
                                        disabled="@_isLoading">
                                    <i class="bi @(_showPassword ? "bi-eye-slash" : "bi-eye")"></i>
                                </button>
                            </div>
                            <ValidationMessage For="@(() => _loginRequest.Password)" class="text-danger small" />
                        </div>

                        <!-- Remember Me -->
                        <div class="mb-3 form-check">
                            <InputCheckbox @bind-Value="_loginRequest.RememberMe" 
                                          class="form-check-input" 
                                          id="rememberMe"
                                          disabled="@_isLoading" />
                            <label class="form-check-label" for="rememberMe">
                                Remember me
                            </label>
                        </div>

                        <!-- Submit Button -->
                        <div class="d-grid mb-3">
                            <button type="submit" 
                                    class="btn btn-primary btn-lg" 
                                    disabled="@_isLoading">
                                @if (_isLoading)
                                {
                                    <span class="spinner-border spinner-border-sm me-2" role="status"></span>
                                    <span>Signing in...</span>
                                }
                                else
                                {
                                    <i class="bi bi-box-arrow-in-right me-2"></i>
                                    <span>Sign In</span>
                                }
                            </button>
                        </div>
                    </EditForm>

                    <!-- Divider -->
                    <div class="text-center mb-3">
                        <span class="text-muted">or</span>
                    </div>

                    <!-- Google Login Button -->
                    <div class="d-grid mb-4">
                        <button type="button" 
                                class="btn btn-outline-danger btn-lg" 
                                @onclick="HandleGoogleLoginAsync"
                                disabled="@_isLoading">
                            <i class="bi bi-google me-2"></i>
                            Continue with Google
                        </button>
                    </div>

                    <!-- Links -->
                    <div class="text-center">
                        <p class="mb-2">
                            <a href="/forgot-password" class="text-decoration-none">Forgot your password?</a>
                        </p>
                        <p class="mb-0">
                            Don't have an account? 
                            <a href="/signup" class="text-decoration-none fw-bold">Sign up</a>
                        </p>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    private LoginRequest _loginRequest = new();
    private bool _isLoading = false;
    private bool _showPassword = false;
    private string? _errorMessage;

    protected override Task OnInitializedAsync()
    {
        // Redirect if already authenticated
        if (AuthService.IsAuthenticated)
        {
            Navigation.NavigateTo("/map");
        }
        return Task.CompletedTask;
    }

    private async Task HandleLoginAsync()
    {
        _isLoading = true;
        _errorMessage = null;
        StateHasChanged();

        try
        {
            var response = await AuthService.LoginAsync(_loginRequest);
            
            if (response.Success)
            {
                // Redirect to map page after successful login
                Navigation.NavigateTo("/map");
            }
            else
            {
                _errorMessage = response.Message;
            }
        }
        catch (Exception ex)
        {
            _errorMessage = "An unexpected error occurred. Please try again.";
            Console.WriteLine($"Login error: {ex.Message}");
        }
        finally
        {
            _isLoading = false;
            StateHasChanged();
        }
    }

    private async Task HandleGoogleLoginAsync()
    {
        _isLoading = true;
        _errorMessage = null;
        StateHasChanged();

        try
        {
            // Initialize Google Sign-In
            await JSRuntime.InvokeVoidAsync("initializeGoogleSignIn");
            
            // Trigger Google Sign-In
            var googleUser = await JSRuntime.InvokeAsync<GoogleUserInfo>("signInWithGoogle");
            
            if (googleUser != null && !string.IsNullOrEmpty(googleUser.IdToken))
            {
                var request = new GoogleLoginRequest
                {
                    GoogleToken = googleUser.IdToken,
                    Email = googleUser.Email,
                    DisplayName = googleUser.Name,
                    GoogleId = googleUser.Id
                };

                var response = await AuthService.GoogleLoginAsync(request);
                
                if (response.Success)
                {
                    Navigation.NavigateTo("/map");
                }
                else
                {
                    _errorMessage = response.Message;
                }
            }
            else
            {
                _errorMessage = "Google sign-in was cancelled or failed.";
            }
        }
        catch (Exception ex)
        {
            _errorMessage = "Google sign-in failed. Please try again.";
            Console.WriteLine($"Google login error: {ex.Message}");
        }
        finally
        {
            _isLoading = false;
            StateHasChanged();
        }
    }

    private void TogglePasswordVisibility()
    {
        _showPassword = !_showPassword;
    }

    // Helper class for Google user info
    public class GoogleUserInfo
    {
        public string Id { get; set; } = "";
        public string Email { get; set; } = "";
        public string Name { get; set; } = "";
        public string IdToken { get; set; } = "";
    }
}
