@page "/chat"
@page "/chat/{ConversationId}"
@using MapMe.Client.Services
@using MapMe.Client.Models
@inject ChatService ChatService
@inject UserProfileService ProfileService
@inject IJSRuntime Js
@inject NavigationManager Navigation

<PageTitle>Chat - MapMe</PageTitle>

<div class="container-fluid h-100">
    <div class="row h-100">
        <!-- Conversations List -->
        <div class="col-md-4 col-lg-3 border-end bg-light h-100 p-0">
            <div class="d-flex flex-column h-100">
                <!-- Header -->
                <div class="p-3 border-bottom bg-white">
                    <div class="d-flex justify-content-between align-items-center">
                        <h5 class="mb-0">Messages</h5>
                        @if (_totalUnreadCount > 0)
                        {
                            <span class="badge bg-primary rounded-pill">@_totalUnreadCount</span>
                        }
                    </div>
                </div>

                <!-- Conversations -->
                <div class="flex-grow-1 overflow-auto">
                    @if (_loading)
                    {
                        <div class="text-center p-4">
                            <div class="spinner-border text-primary" role="status">
                                <span class="visually-hidden">Loading...</span>
                            </div>
                        </div>
                    }
                    else if (!_conversations.Any())
                    {
                        <div class="text-center p-4 text-muted">
                            <i class="bi bi-chat-dots fs-1 mb-3 d-block"></i>
                            <p>No conversations yet</p>
                            <small>Start chatting with other users!</small>
                        </div>
                    }
                    else
                    {
                        @foreach (var conversation in _conversations)
                        {
                            <div class="conversation-item p-3 border-bottom @(conversation.Id == ConversationId ? "active" : "")"
                                 @onclick="() => SelectConversation(conversation.Id)"
                                 style="cursor: pointer;">
                                <div class="d-flex">
                                    <div class="flex-shrink-0 me-3">
                                        <img src="@(conversation.OtherParticipant.AvatarUrl ?? "/images/user-avatar.svg")"
                                             alt="@conversation.OtherParticipant.DisplayName"
                                             class="rounded-circle"
                                             style="width: 48px; height: 48px; object-fit: cover;">
                                    </div>
                                    <div class="flex-grow-1 min-w-0">
                                        <div class="d-flex justify-content-between align-items-start">
                                            <h6 class="mb-1 text-truncate">@conversation.OtherParticipant.DisplayName</h6>
                                            @if (conversation.LastMessage != null)
                                            {
                                                <small class="text-muted">@FormatMessageTime(conversation.LastMessage.CreatedAt)</small>
                                            }
                                        </div>
                                        @if (conversation.LastMessage != null)
                                        {
                                            <p class="mb-1 text-muted text-truncate small">
                                                @if (conversation.LastMessage.SenderId == "current_user")
                                                {
                                                    <span>You: </span>
                                                }
                                                @GetMessagePreview(conversation.LastMessage)
                                            </p>
                                        }
                                        @if (conversation.UnreadCount > 0)
                                        {
                                            <span class="badge bg-primary rounded-pill small">@conversation.UnreadCount</span>
                                        }
                                    </div>
                                </div>
                            </div>
                        }
                    }
                </div>
            </div>
        </div>

        <!-- Chat Area -->
        <div class="col-md-8 col-lg-9 d-flex flex-column h-100 p-0">
            @if (string.IsNullOrEmpty(ConversationId))
            {
                <!-- No conversation selected -->
                <div class="d-flex align-items-center justify-content-center h-100 text-muted">
                    <div class="text-center">
                        <i class="bi bi-chat-square-text fs-1 mb-3"></i>
                        <h5>Select a conversation</h5>
                        <p>Choose a conversation from the list to start messaging</p>
                    </div>
                </div>
            }
            else
            {
                <!-- Chat Header -->
                <div class="p-3 border-bottom bg-white">
                    <div class="d-flex align-items-center">
                        <button class="btn btn-link d-md-none me-2 p-0" @onclick="GoBackToConversations">
                            <i class="bi bi-arrow-left"></i>
                        </button>
                        @if (_selectedConversation != null)
                        {
                            <img src="@(_selectedConversation.OtherParticipant.AvatarUrl ?? "/images/user-avatar.svg")"
                                 alt="@_selectedConversation.OtherParticipant.DisplayName"
                                 class="rounded-circle me-3"
                                 style="width: 40px; height: 40px; object-fit: cover;">
                            <div>
                                <h6 class="mb-0">@_selectedConversation.OtherParticipant.DisplayName</h6>
                                <small class="text-muted">Active now</small>
                            </div>
                        }
                    </div>
                </div>

                <!-- Messages Area -->
                <div class="flex-grow-1 overflow-auto p-3" id="messagesContainer" style="background-color: #f8f9fa;">
                    @if (_loadingMessages)
                    {
                        <div class="text-center">
                            <div class="spinner-border text-primary" role="status">
                                <span class="visually-hidden">Loading messages...</span>
                            </div>
                        </div>
                    }
                    else if (!_messages.Any())
                    {
                        <div class="text-center text-muted">
                            <i class="bi bi-chat-dots fs-1 mb-3"></i>
                            <p>No messages yet</p>
                            <small>Start the conversation!</small>
                        </div>
                    }
                    else
                    {
                        @foreach (var message in _messages.OrderBy(m => m.CreatedAt))
                        {
                            <div class="mb-3 d-flex @(message.SenderId == "current_user" ? "justify-content-end" : "justify-content-start")">
                                <div class="message-bubble @(message.SenderId == "current_user" ? "sent" : "received")"
                                     style="max-width: 70%;">
                                    @if (message.MessageType == "text")
                                    {
                                        <div class="message-content">@message.Content</div>
                                    }
                                    else if (message.MessageType == "image" && message.Metadata?.ImageUrl != null)
                                    {
                                        <img src="@message.Metadata.ImageUrl" alt="Shared image" class="img-fluid rounded mb-2" style="max-width: 300px;">
                                        @if (!string.IsNullOrEmpty(message.Content))
                                        {
                                            <div class="message-content">@message.Content</div>
                                        }
                                    }
                                    else if (message.MessageType == "location" && message.Metadata?.Latitude != null && message.Metadata?.Longitude != null)
                                    {
                                        <div class="location-message p-2 border rounded">
                                            <i class="bi bi-geo-alt-fill text-primary"></i>
                                            <strong>@(message.Metadata.LocationName ?? "Shared Location")</strong>
                                            <br>
                                            <small class="text-muted">Lat: @message.Metadata.Latitude.Value.ToString("F6"), Lng: @message.Metadata.Longitude.Value.ToString("F6")</small>
                                        </div>
                                        @if (!string.IsNullOrEmpty(message.Content))
                                        {
                                            <div class="message-content mt-2">@message.Content</div>
                                        }
                                    }
                                    else if (message.MessageType == "datemark" && message.Metadata?.DateMarkId != null)
                                    {
                                        <div class="datemark-message p-2 border rounded">
                                            <i class="bi bi-heart-fill text-danger"></i>
                                            <strong>@(message.Metadata.DateMarkName ?? "Shared Date Mark")</strong>
                                            <br>
                                            <small class="text-muted">Date Mark shared</small>
                                        </div>
                                        @if (!string.IsNullOrEmpty(message.Content))
                                        {
                                            <div class="message-content mt-2">@message.Content</div>
                                        }
                                    }
                                    
                                    <div class="message-time">
                                        <small class="text-muted">@FormatMessageTime(message.CreatedAt)</small>
                                        @if (message.SenderId == "current_user")
                                        {
                                            @if (message.IsRead)
                                            {
                                                <i class="bi bi-check2-all text-primary ms-1" title="Read"></i>
                                            }
                                            else if (message.IsDelivered)
                                            {
                                                <i class="bi bi-check2 text-muted ms-1" title="Delivered"></i>
                                            }
                                            else
                                            {
                                                <i class="bi bi-clock text-muted ms-1" title="Sending"></i>
                                            }
                                        }
                                    </div>
                                </div>
                            </div>
                        }
                    }
                </div>

                <!-- Message Input -->
                <div class="p-3 border-top bg-white">
                    <div class="input-group">
                        <input type="text" class="form-control" placeholder="Type a message..." 
                               @bind="_newMessageText" @onkeypress="HandleKeyPress" disabled="@_sendingMessage">
                        <button class="btn btn-outline-secondary" type="button" disabled="@_sendingMessage">
                            <i class="bi bi-paperclip"></i>
                        </button>
                        <button class="btn btn-primary" type="button" @onclick="SendMessage" disabled="@(_sendingMessage || string.IsNullOrWhiteSpace(_newMessageText))">
                            @if (_sendingMessage)
                            {
                                <span class="spinner-border spinner-border-sm me-1" role="status"></span>
                            }
                            else
                            {
                                <i class="bi bi-send"></i>
                            }
                        </button>
                    </div>
                </div>
            }
        </div>
    </div>
</div>

<style>
    .conversation-item:hover {
        background-color: #f8f9fa;
    }
    
    .conversation-item.active {
        background-color: #e3f2fd;
        border-left: 4px solid #2196f3;
    }
    
    .message-bubble {
        padding: 12px 16px;
        border-radius: 18px;
        word-wrap: break-word;
    }
    
    .message-bubble.sent {
        background-color: #007bff;
        color: white;
    }
    
    .message-bubble.received {
        background-color: white;
        border: 1px solid #dee2e6;
        color: #333;
    }
    
    .message-content {
        margin-bottom: 4px;
    }
    
    .message-time {
        font-size: 0.75rem;
        opacity: 0.8;
    }
    
    .h-100 {
        height: 100vh !important;
    }
    
    @@media (max-width: 767.98px) {
        .h-100 {
            height: calc(100vh - 56px) !important;
        }
    }
</style>

@code {
    [Parameter] public string? ConversationId { get; set; }

    private List<ConversationSummary> _conversations = new();
    private List<ChatMessage> _messages = new();
    private ConversationSummary? _selectedConversation;
    private string _newMessageText = string.Empty;
    private bool _loading = true;
    private bool _loadingMessages = false;
    private bool _sendingMessage = false;
    private int _totalUnreadCount = 0;

    protected override async Task OnInitializedAsync()
    {
        await LoadConversationsAsync();
    }

    protected override async Task OnParametersSetAsync()
    {
        if (!string.IsNullOrEmpty(ConversationId))
        {
            await LoadMessagesAsync(ConversationId);
            _selectedConversation = _conversations.FirstOrDefault(c => c.Id == ConversationId);
            
            // Mark messages as read when opening conversation
            if (_selectedConversation != null)
            {
                await ChatService.MarkAsReadAsync(ConversationId);
                _selectedConversation.UnreadCount = 0;
                await UpdateUnreadCount();
            }
        }
    }

    private async Task LoadConversationsAsync()
    {
        _loading = true;
        try
        {
            _conversations = await ChatService.GetConversationsAsync();
            await UpdateUnreadCount();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading conversations: {ex.Message}");
        }
        finally
        {
            _loading = false;
            StateHasChanged();
        }
    }

    private async Task LoadMessagesAsync(string conversationId)
    {
        _loadingMessages = true;
        try
        {
            _messages = await ChatService.GetMessagesAsync(conversationId);
            StateHasChanged();
            
            // Scroll to bottom after messages load
            await Task.Delay(100);
            await ScrollToBottom();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading messages: {ex.Message}");
        }
        finally
        {
            _loadingMessages = false;
            StateHasChanged();
        }
    }

    private async Task SelectConversation(string conversationId)
    {
        Navigation.NavigateTo($"/chat/{conversationId}");
    }

    private async Task SendMessage()
    {
        if (string.IsNullOrWhiteSpace(_newMessageText) || string.IsNullOrEmpty(ConversationId) || _selectedConversation == null)
            return;

        _sendingMessage = true;
        var messageText = _newMessageText.Trim();
        _newMessageText = string.Empty;

        try
        {
            var message = await ChatService.SendMessageAsync(_selectedConversation.OtherParticipant.UserId, messageText);
            if (message != null)
            {
                _messages.Add(message);
                
                // Update conversation in list
                var conversation = _conversations.FirstOrDefault(c => c.Id == ConversationId);
                if (conversation != null)
                {
                    conversation.LastMessage = new MessageSummary
                    {
                        Id = message.Id,
                        Content = message.Content,
                        MessageType = message.MessageType,
                        SenderId = message.SenderId,
                        CreatedAt = message.CreatedAt,
                        IsRead = message.IsRead
                    };
                    conversation.UpdatedAt = message.CreatedAt;
                }

                StateHasChanged();
                await ScrollToBottom();
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error sending message: {ex.Message}");
            // Restore message text on error
            _newMessageText = messageText;
        }
        finally
        {
            _sendingMessage = false;
            StateHasChanged();
        }
    }

    private async Task HandleKeyPress(KeyboardEventArgs e)
    {
        if (e.Key == "Enter" && !e.ShiftKey)
        {
            await SendMessage();
        }
    }

    private async Task ScrollToBottom()
    {
        try
        {
            await Js.InvokeVoidAsync("eval", @"
                const container = document.getElementById('messagesContainer');
                if (container) {
                    container.scrollTop = container.scrollHeight;
                }
            ");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error scrolling to bottom: {ex.Message}");
        }
    }

    private async Task UpdateUnreadCount()
    {
        _totalUnreadCount = _conversations.Sum(c => c.UnreadCount);
    }

    private string FormatMessageTime(DateTime dateTime)
    {
        var now = DateTime.Now;
        var diff = now - dateTime;

        if (diff.TotalMinutes < 1)
            return "now";
        if (diff.TotalHours < 1)
            return $"{(int)diff.TotalMinutes}m";
        if (diff.TotalDays < 1)
            return $"{(int)diff.TotalHours}h";
        if (diff.TotalDays < 7)
            return $"{(int)diff.TotalDays}d";
        
        return dateTime.ToString("MMM d");
    }

    private string GetMessagePreview(MessageSummary message)
    {
        return message.MessageType switch
        {
            "image" => "📷 Photo",
            "location" => "📍 Location",
            "datemark" => "❤️ Date Mark",
            _ => message.Content
        };
    }

    private async Task GoBackToConversations()
    {
        Navigation.NavigateTo("/chat");
    }
}
