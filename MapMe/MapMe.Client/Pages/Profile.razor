@page "/profile"
@using System.Text.Json
@inject IJSRuntime Js
@inject NavigationManager Nav

<PageTitle>Profile - MapMe</PageTitle>

@if (_loading)
{
    <div class="d-flex justify-content-center align-items-center" style="height: 50vh;">
        <div class="spinner-border text-primary" role="status">
            <span class="visually-hidden">Loading...</span>
        </div>
        <span class="ms-2">Loading profile...</span>
    </div>
}
else
{
    <div class="page">
        <div class="d-flex align-items-center justify-content-between flex-wrap gap-2 mb-3">
            <h1 class="mb-0">My Profile</h1>
            <div class="d-flex gap-2">
                @if (_isEditing)
                {
                    <button class="btn btn-success" @onclick="SaveProfile">
                        <i class="bi bi-check-lg"></i> Save Changes
                    </button>
                    <button class="btn btn-secondary" @onclick="CancelEdit">
                        <i class="bi bi-x-lg"></i> Cancel
                    </button>
                }
                else
                {
                    <button class="btn btn-primary" @onclick="StartEdit">
                        <i class="bi bi-pencil"></i> Edit Profile
                    </button>
                }
            </div>
        </div>

        <!-- User Info Card -->
        <div class="card mb-3">
            <CardHeader>
                <CardTitle class="mb-0">User Information</CardTitle>
            </CardHeader>
            <CardBody>
                <div class="row g-3 align-items-center">
                    <div class="col-auto">
                        <img src="@_avatar" alt="Avatar" style="width:64px;height:64px;border-radius:50%;object-fit:cover;border:1px solid #e9ecef;" />
                    </div>
                    <div class="col">
                        @if (_isEditing)
                        {
                            <div class="mb-2">
                                <label class="form-label">Display Name</label>
                                <input type="text" class="form-control" @bind="_editDisplayName" placeholder="Enter your display name" />
                            </div>
                            <div class="mb-2">
                                <label class="form-label">Bio</label>
                                <textarea class="form-control" rows="2" @bind="_editBio" placeholder="Tell us about yourself..."></textarea>
                            </div>
                        }
                        else
                        {
                            <div class="fw-semibold">@_displayName</div>
                            @if (!string.IsNullOrWhiteSpace(_bio))
                            {
                                <div class="text-muted small mt-1">@_bio</div>
                            }
                        }
                        <div class="text-muted small mt-1">Total Date Marks: @_marks.Count</div>
                        @if (!string.IsNullOrWhiteSpace(_lastNote))
                        {
                            <div class="small mt-1">Latest note: <span class="text-muted">@_lastNote</span></div>
                        }
                    </div>
                </div>
            </CardBody>
        </div>

        <!-- Preferences Card -->
        @if (_isEditing)
        {
            <div class="card mb-3">
                <CardHeader>
                    <CardTitle class="mb-0">Preferences</CardTitle>
                </CardHeader>
                <CardBody>
                    <div class="mb-3">
                        <label class="form-label">Favorite Categories</label>
                        <input type="text" class="form-control" @bind="_editCategories" 
                               placeholder="e.g., coffee, restaurants, parks (comma-separated)" />
                        <div class="form-text">Enter your favorite place categories, separated by commas</div>
                    </div>
                    <div class="mb-3">
                        <label class="form-label">Profile Visibility</label>
                        <select class="form-select" @bind="_editVisibility">
                            <option value="public">Public - Anyone can view</option>
                            <option value="friends">Friends Only</option>
                            <option value="private">Private - Only me</option>
                        </select>
                    </div>
                </CardBody>
            </div>
        }

        <!-- Photos Card -->
        <div class="card mb-3">
            <CardHeader>
                <div class="d-flex justify-content-between align-items-center">
                    <CardTitle class="mb-0">My Photos (@_photos.Count)</CardTitle>
                    @if (_isEditing)
                    {
                        <button class="btn btn-sm btn-outline-primary" @onclick="AddPhoto">
                            <i class="bi bi-plus"></i> Add Photo
                        </button>
                    }
                </div>
            </CardHeader>
            <CardBody>
                @if (_photos.Count > 0)
                {
                    <div class="row g-2">
                        @for (int i = 0; i < _photos.Count; i++)
                        {
                            var p = _photos[i];
                            var index = i; // Capture for lambda
                            <div class="col-6 col-md-4 col-lg-3 position-relative">
                                <img src="@p" @onclick="() => OpenLightbox(index)" 
                                     class="img-fluid rounded" 
                                     style="width:100%;height:140px;object-fit:cover;cursor:pointer;border:1px solid #e9ecef;" />
                                @if (_isEditing)
                                {
                                    <button class="btn btn-sm btn-danger position-absolute top-0 end-0 m-1" 
                                            @onclick="() => RemovePhoto(index)" style="--bs-btn-padding-y: .125rem; --bs-btn-padding-x: .25rem;">
                                        <i class="bi bi-x"></i>
                                    </button>
                                }
                            </div>
                        }
                    </div>
                }
                else
                {
                    <div class="text-muted">No photos available.</div>
                }
            </CardBody>
        </div>

        <!-- Date Marks Card -->
        <div class="card">
            <CardHeader>
                <CardTitle class="mb-0">My Date Marks (@_marks.Count)</CardTitle>
            </CardHeader>
            <CardBody>
                @if (_marks.Count > 0)
                {
                    <div class="list-group list-group-flush">
                        @foreach (var mark in _marks.Take(10))
                        {
                            <div class="list-group-item px-0">
                                <div class="d-flex align-items-start">
                                    @if (!string.IsNullOrWhiteSpace(mark.PlacePhotoUrl))
                                    {
                                        <img src="@mark.PlacePhotoUrl" alt="Place" 
                                             class="me-3 rounded" 
                                             style="width:60px;height:60px;object-fit:cover;border:1px solid #e9ecef;" />
                                    }
                                    <div class="flex-grow-1">
                                        <div class="d-flex justify-content-between align-items-start">
                                            <div>
                                                <h6 class="mb-1">@(mark.Name ?? "Unnamed Location")</h6>
                                                <p class="mb-1 text-muted small">@mark.Address</p>
                                                @if (!string.IsNullOrWhiteSpace(mark.Note))
                                                {
                                                    <p class="mb-1 small">@mark.Note</p>
                                                }
                                                @if (mark.Categories?.Count > 0)
                                                {
                                                    <div class="mb-1">
                                                        @foreach (var category in mark.Categories)
                                                        {
                                                            <span class="badge bg-primary me-1">@category</span>
                                                        }
                                                    </div>
                                                }
                                                @if (mark.Tags?.Count > 0)
                                                {
                                                    <div class="mb-1">
                                                        @foreach (var tag in mark.Tags)
                                                        {
                                                            <span class="badge bg-secondary me-1">#@tag</span>
                                                        }
                                                    </div>
                                                }
                                                @if (mark.Qualities?.Count > 0)
                                                {
                                                    <div class="mb-1">
                                                        @foreach (var quality in mark.Qualities)
                                                        {
                                                            <span class="badge bg-success me-1">@quality</span>
                                                        }
                                                    </div>
                                                }
                                                @if (mark.VisitDate.HasValue)
                                                {
                                                    <small class="text-muted">Visited: @mark.VisitDate.Value.ToString("MMM dd, yyyy")</small>
                                                }
                                            </div>
                                            <small class="text-muted">@mark.SavedAt.ToString("MMM dd, yyyy")</small>
                                        </div>
                                        <div class="d-flex gap-2 mt-2">
                                            <button class="btn btn-sm btn-outline-primary" 
                                                    @onclick="() => ViewOnMap(mark)">
                                                <i class="bi bi-geo-alt"></i> View on Map
                                            </button>
                                            @if (_isEditing)
                                            {
                                                <button class="btn btn-sm btn-outline-secondary" 
                                                        @onclick="() => EditDateMark(mark)">
                                                    <i class="bi bi-pencil"></i> Edit
                                                </button>
                                                <button class="btn btn-sm btn-outline-danger" 
                                                        @onclick="() => DeleteDateMark(mark)">
                                                    <i class="bi bi-trash"></i> Delete
                                                </button>
                                            }
                                        </div>
                                    </div>
                                </div>
                            </div>
                        }
                    </div>
                    
                    @if (_marks.Count > 10)
                    {
                        <div class="mt-3 text-center">
                            <small class="text-muted">Showing 10 of @_marks.Count Date Marks</small>
                        </div>
                    }
                }
                else
                {
                    <div class="text-center py-4">
                        <i class="bi bi-geo-alt text-muted" style="font-size: 3rem;"></i>
                        <h5 class="mt-3 text-muted">No Date Marks Yet</h5>
                        <p class="text-muted">Start exploring and create your first Date Mark!</p>
                        <a href="/map" class="btn btn-primary">Go to Map</a>
                    </div>
                }
            </CardBody>
        </div>
    </div>
}

<!-- Add Photo Modal -->
@if (_showAddPhotoModal)
{
    <div class="modal fade show d-block" tabindex="-1" style="background-color: rgba(0,0,0,0.5);">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Add Photo</h5>
                    <button type="button" class="btn-close" @onclick="CloseAddPhotoModal"></button>
                </div>
                <div class="modal-body">
                    <div class="mb-3">
                        <label class="form-label">Photo URL</label>
                        <input type="url" class="form-control" @bind="_newPhotoUrl" placeholder="https://example.com/photo.jpg" />
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" @onclick="CloseAddPhotoModal">Cancel</button>
                    <button type="button" class="btn btn-primary" @onclick="ConfirmAddPhoto">Add Photo</button>
                </div>
            </div>
        </div>
    </div>
}

@code {
    private bool _loading = true;
    private string _currentUser = "current user";
    private string _displayName = "current user";
    private string _bio = "";
    private string _categories = "";
    private string _visibility = "public";
    private List<MarkDate> _marks = new();
    private string _avatar = "/images/user-avatar.svg";
    private List<string> _photos = new();
    private string? _lastNote;
    private bool _isEditing = false;
    private string _editDisplayName = "";
    private string _editBio = "";
    private string _editCategories = "";
    private string _editVisibility = "public";
    private bool _showAddPhotoModal = false;
    private string _newPhotoUrl = "";

    // Default user images
    private static readonly string DefaultUserAvatar = "/images/user-avatar.svg";
    private static readonly List<string> DefaultUserPhotoUrls = new()
    {
        "https://i.pravatar.cc/300?img=12",
        "https://i.pravatar.cc/300?img=32",
        "https://i.pravatar.cc/300?img=68"
    };

    protected override async Task OnInitializedAsync()
    {
        await LoadProfileData();
    }

    private async Task LoadProfileData()
    {
        _loading = true;
        _marks.Clear();
        _photos.Clear();
        _lastNote = null;

        try
        {
            // Load user profile data
            var profileJson = await Js.InvokeAsync<string?>("MapMe.storage.load", "profile");
            if (!string.IsNullOrWhiteSpace(profileJson))
            {
                var profile = JsonSerializer.Deserialize<ProfileData>(profileJson);
                if (profile != null)
                {
                    _displayName = profile.DisplayName ?? _currentUser;
                    _bio = profile.Bio ?? "";
                    _categories = profile.Categories ?? "";
                    _visibility = profile.Visibility ?? "public";
                }
            }

            // Load user photos
            var photosJson = await Js.InvokeAsync<string?>("MapMe.storage.load", "photos");
            if (!string.IsNullOrWhiteSpace(photosJson))
            {
                _photos = JsonSerializer.Deserialize<List<string>>(photosJson) ?? new List<string>();
            }
            
            // Use default photos if none exist
            if (_photos.Count == 0)
            {
                _photos = new List<string>(DefaultUserPhotoUrls);
            }

            // Load all Date Marks from storage
            var json = await Js.InvokeAsync<string?>("MapMe.storage.load", "markDates");
            var allMarks = !string.IsNullOrWhiteSpace(json) 
                ? JsonSerializer.Deserialize<List<MarkDate>>(json) ?? new List<MarkDate>() 
                : new List<MarkDate>();

            // Filter for current user's marks
            _marks = allMarks
                .Where(m => string.Equals(m.CreatedBy, _currentUser, StringComparison.OrdinalIgnoreCase))
                .OrderByDescending(m => m.SavedAt)
                .ToList();

            // Backfill fake user photos if missing
            foreach (var mark in _marks)
            {
                if (mark.UserPhotoUrls == null || mark.UserPhotoUrls.Count == 0)
                {
                    mark.UserPhotoUrls = new List<string>(DefaultUserPhotoUrls);
                }
                if (string.IsNullOrWhiteSpace(mark.UserPhotoUrl))
                {
                    mark.UserPhotoUrl = DefaultUserAvatar;
                }
            }

            if (_marks.Count > 0)
            {
                // Set avatar from first available user photo
                var first = _marks.First();
                _avatar = first.UserPhotoUrl ?? first.UserPhotoUrls?.FirstOrDefault() ?? DefaultUserAvatar;

                // Get the most recent note
                _lastNote = _marks.FirstOrDefault(m => !string.IsNullOrWhiteSpace(m.Note))?.Note;
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading profile data: {ex.Message}");
        }
        finally
        {
            _loading = false;
        }
    }

    private async Task OpenLightbox(int index)
    {
        try
        {
            await Js.InvokeVoidAsync("MapMe.openPhotoViewer", _photos, index);
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error opening lightbox: {ex.Message}");
        }
    }

    private void ViewOnMap(MarkDate mark)
    {
        // Navigate to map and center on this location
        Nav.NavigateTo($"/map?lat={mark.Latitude}&lng={mark.Longitude}&zoom=15");
    }

    private void StartEdit()
    {
        _isEditing = true;
        _editDisplayName = _displayName;
        _editBio = _bio;
        _editCategories = _categories;
        _editVisibility = _visibility;
    }

    private async Task SaveProfile()
    {
        try
        {
            // Update user data
            _displayName = _editDisplayName;
            _bio = _editBio;
            _categories = _editCategories;
            _visibility = _editVisibility;

            // Save changes to storage
            var profileData = new ProfileData
            {
                DisplayName = _displayName,
                Bio = _bio,
                Categories = _categories,
                Visibility = _visibility
            };

            await Js.InvokeVoidAsync("MapMe.storage.save", "profile", JsonSerializer.Serialize(profileData));

            _isEditing = false;
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error saving profile: {ex.Message}");
        }
    }

    private void CancelEdit()
    {
        _isEditing = false;
        // Reset edit fields
        _editDisplayName = _displayName;
        _editBio = _bio;
        _editCategories = _categories;
        _editVisibility = _visibility;
    }

    private void AddPhoto()
    {
        _showAddPhotoModal = true;
        _newPhotoUrl = "";
    }

    private void CloseAddPhotoModal()
    {
        _showAddPhotoModal = false;
        _newPhotoUrl = "";
    }

    private async Task ConfirmAddPhoto()
    {
        if (string.IsNullOrWhiteSpace(_newPhotoUrl))
            return;

        try
        {
            // Add new photo to user photos
            _photos.Add(_newPhotoUrl);

            // Save changes to storage
            await Js.InvokeVoidAsync("MapMe.storage.save", "photos", JsonSerializer.Serialize(_photos));

            _showAddPhotoModal = false;
            _newPhotoUrl = "";
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error adding photo: {ex.Message}");
        }
    }

    private async Task RemovePhoto(int index)
    {
        if (index < 0 || index >= _photos.Count)
            return;

        try
        {
            // Remove photo from user photos
            _photos.RemoveAt(index);

            // Save changes to storage
            await Js.InvokeVoidAsync("MapMe.storage.save", "photos", JsonSerializer.Serialize(_photos));
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error removing photo: {ex.Message}");
        }
    }

    private async Task EditDateMark(MarkDate mark)
    {
        try
        {
            // For now, navigate to map to edit the mark
            Nav.NavigateTo($"/map?lat={mark.Latitude}&lng={mark.Longitude}&zoom=15&edit={mark.Id}");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error editing Date Mark: {ex.Message}");
        }
    }

    private async Task DeleteDateMark(MarkDate mark)
    {
        try
        {
            // Remove Date Mark from list
            _marks.Remove(mark);

            // Save changes to storage
            await Js.InvokeVoidAsync("MapMe.storage.save", "markDates", JsonSerializer.Serialize(_marks));
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error deleting Date Mark: {ex.Message}");
        }
    }

    private class ProfileData
    {
        public string? DisplayName { get; set; }
        public string? Bio { get; set; }
        public string? Categories { get; set; }
        public string? Visibility { get; set; }
    }

    private class MarkDate
    {
        public double Latitude { get; set; }
        public double Longitude { get; set; }
        public string? Name { get; set; }
        public string? Address { get; set; }
        public string? PlaceId { get; set; }
        public string CreatedBy { get; set; } = "current user";
        public string? Note { get; set; }
        public List<string>? Types { get; set; }
        public string? Url { get; set; }
        public List<string>? PhotoReferences { get; set; }
        public string? PlacePhotoUrl { get; set; }
        public string? UserPhotoUrl { get; set; }
        public List<string>? UserPhotoUrls { get; set; }
        public DateTime SavedAt { get; set; }
        public string? Id { get; set; }
        public List<string>? Categories { get; set; }
        public List<string>? Tags { get; set; }
        public List<string>? Qualities { get; set; }
        public DateTime? VisitDate { get; set; }
    }
}
